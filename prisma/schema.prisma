generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Topic {
  id        Int        @id @default(autoincrement())
  title     String     @db.VarChar(255)
  chapters  Chapter[]
  sections  Section[]
  topicInfo TopicInfo?
}

model TopicInfo {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now()) @db.Timestamp(6)
  relevance   String?  @db.VarChar(255)
  websiteLink String?  @db.VarChar(255)
  topicId     Int      @unique
  topic       Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)
}

model Section {
  id          Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now()) @db.Timestamp(6)
  title       String       @unique @db.VarChar(255)
  topicId     Int
  chapters    Chapter[]
  topic       Topic        @relation(fields: [topicId], references: [id])
  sectionInfo SectionInfo?
  categories  Category[]   @relation("CategoryToSection")
  resources   Resource[]   @relation("SectionToResource")
}

model SectionInfo {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now()) @db.Timestamp(6)
  color          String?  @db.VarChar(255)
  imageLink      String?
  whitepaperLink String?  @db.VarChar(255)
  twitterLink    String?  @db.VarChar(255)
  websiteLink    String?  @db.VarChar(255)
  consensus      String?  @db.VarChar(255)
  creator        String?  @db.VarChar(255)
  tvl            String?  @db.VarChar(255)
  blockTime      String?  @db.VarChar(255)
  creationDate   String?  @db.VarChar(255)
  sectionId      Int      @unique
  section        Section @relation(fields: [sectionId], references: [id], onUpdate: NoAction)
}

model Category {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now()) @db.Timestamp(6)
  title     String     @unique @db.VarChar(255)
  resources Resource[] @relation("CategoryToResource")
  sections  Section[]  @relation("CategoryToSection")
}

model Resource {
  id            Int             @id @default(autoincrement())
  createdAt     DateTime        @default(now()) @db.Timestamp(6)
  updatedAt     DateTime        @updatedAt
  link          String
  authorId      Int
  typeId        Int
  author        User            @relation(fields: [authorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Type          Type            @relation(fields: [typeId], references: [id])
  WatchlistItem WatchlistItem[]
  categories    Category[]      @relation("CategoryToResource")
  sections      Section[]       @relation("SectionToResource")
}

model User {
  id            Int        @id @default(autoincrement())
  privyUserId   String     @unique
  name          String?    @db.VarChar(255)
  createdAt     DateTime   @default(now()) @db.Timestamp(6)
  verified      Boolean    @default(false)
  contributions Resource[]
}


model Type {
  id       Int        @id @default(autoincrement())
  title    String     @db.VarChar(255)
  Resource Resource[]
}

model Watchlist {
  id            Int             @id @default(autoincrement())
  name          String          @db.VarChar(255)
  createdAt     DateTime        @default(now()) @db.Timestamp(6)
  WatchlistItem WatchlistItem[]
}

model WatchlistItem {
  id          Int       @id @default(autoincrement())
  addedAt     DateTime  @default(now()) @db.Timestamp(6)
  resourceId  Int
  watchlistId Int
  Resource    Resource  @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  Watchlist   Watchlist @relation(fields: [watchlistId], references: [id], onDelete: Cascade)
}

model Chapter {
  id          Int     @id @default(autoincrement())
  title       String  @db.VarChar(255)
  description String?
  sectionId   Int?
  topicId     Int?
  section     Section? @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  topic       Topic?  @relation(fields: [topicId], references: [id])
}
